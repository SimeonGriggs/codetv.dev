---
import { format } from 'date-fns';
import { marked } from 'marked';
import { Image } from '@unpic/astro';
import { getAllEpisodes, getEpisodeBySlug, getSupporters } from '../../../../util/sanity';
import { createImageUrl } from '../../../../util/cloudinary';
import { getSubscriptionStatus } from '../../../../util/stripe';
import { loadUsersByIDs } from '../../../../util/clerk';
import Layout from '../../../../layouts/default.astro';
import VideoPlayer from '../../../../components/video-player.astro';
import EpisodePreview from '../../../../components/episode-preview.astro';
import ShareInput from '../../../../components/share-input.astro';
import Heart from '../../../../components/heart.astro';

export const prerender = true;

export async function getStaticPaths() {
	const allEpisodes = await getAllEpisodes();

	return allEpisodes.map((e) => {
		if (!e.series || !e.collection || !e.slug) {
			console.log(e)
			return false;
		}

		return {
			params: { seriesSlug: e.series, collectionSlug: e.collection, episodeSlug: e.slug },
		};
	}).filter(Boolean);
}

const { episodeSlug } = Astro.params;

const user = await Astro.locals.currentUser();
const status = await getSubscriptionStatus(user);

const episode = await getEpisodeBySlug({ episode: episodeSlug! });
const supporters = await getSupporters();

const people = episode.people ?? [];
const description = marked.parse(episode.description ?? '');

const userIds = people.map((p) => p.user_id).filter((p) => p !== null);
const clerkUsers = await loadUsersByIDs(userIds);
const peopleWithUsername = people.map((person) => {
	const user = clerkUsers.find((u) => u.id === person.user_id);

	return {
		...person,
		username: user?.username,
	};
});

const episodeIndex =
	episode.related_episodes?.findIndex((e) => e.slug === episode.slug) ?? 0;

const episodeNumber = (
	episode.collection?.slug + `E${episodeIndex + 1}`
).toUpperCase();

const relatedEpisodes = episode.related_episodes ?? [];

const url = new URL('https://lwj.dev');
url.pathname = `/series/${episode.series?.slug}/${episode.collection?.slug}/${episode.slug}`;

const thumbnail = episode.thumbnail?.public_id ? createImageUrl(episode.thumbnail.public_id, {
	height: 720,
	width: 1280,
	crop: 'fill',
}) : false;
---

<Layout title={episode.title as string}>
	<Fragment slot="head">
		<link rel="canonical" href={url.toString()} />

		<meta property="og:type" content="video.episode" />
		<meta property="og:title" content={episode.title} />
		<meta property="og:description" content={episode.short_description} />
		<meta property="og:url" content={Astro.url} />

		<!-- <meta
			property="og:video"
			content="https://stream.mux.com/5Mt02twIFdC5m00oZAMVi83aUz8urnKBXT5RcMUd0247XE/capped-1080p.mp4"
		/>
		<meta property="og:video:width" content="1920" />
		<meta property="og:video:height" content="1080" /> -->

		{thumbnail ? (
			<meta
				property="og:image"
				content={thumbnail}
			/>
			<meta property="og:image:width" content="1280" />
			<meta property="og:image:height" content="720" />
			<meta
				property="og:image:alt"
				content={episode.thumbnail?.alt ?? episode.title}
			/>
		) : null}
	</Fragment>

	<VideoPlayer
		video={{
			...episode.video,
			thumbnail: episode.thumbnail,
			title: episode.title,
			publish_date: episode.publish_date,
		}}
		server:defer
	>
		<div class="video-player-placeholder" slot="fallback" />
	</VideoPlayer>

	<div class="wrapper">
		<section class="header">
			<div class="episode-details">
				<h1>
					{episode.title}
				</h1>
				<div class="episode-meta">
					<a
						href={`/series/${episode.series?.slug}/${episode.collection?.slug}/`}
						class="season-link">{episode.series?.title}</a
					>
					<span class="episode-number">
						{episodeNumber}
					</span>
					<span class="episode-date">
						{format(episode.publish_date!, 'MMM d, yyyy')}
					</span>
				</div>
			</div>

			<nav class="episode-links">
				<ShareInput label="Share this episode:" url={url.toString()} />

				{
					status === 'active' ? null : (
						<a href="/dashboard" class="button">
							<Heart /> Become a Supporter
						</a>
					)
				}
			</nav>
		</section>

		<section class="description">
			<div set:html={description} />

			{
				episode.resources && episode.resources.length > 0 ? (
					<div class="resources">
						<h2>Resources & Links</h2>

						<ul class="resources">
							{episode.resources.map((resource) => {
								if (!resource.url) {
									return null;
								}

								const label = resource.label ?? resource.url;

								return (
									<li class="resource">
										<a href={resource.url}>{label}</a>
									</li>
								);
							})}
						</ul>
					</div>
				) : null
			}
		</section>

		<section class="additional-details">
			{
				episode.sponsors && episode.sponsors.length > 0 ? (
					<div class="sponsors">
						<>
							<h3>Presented by</h3>

							<div class="sponsor-logos">
								{episode.sponsors.map((sponsor) => {
									if (
										!sponsor.logo ||
										!sponsor.logo.public_id ||
										!sponsor.logo.width ||
										!sponsor.logo.height
									) {
										return;
									}

									const src = createImageUrl(sponsor.logo.public_id, {
										height: sponsor.logo.height * 2,
										width: sponsor.logo.width * 2,
										color: '#463963',
										effect: 'colorize',
									});

									return (
										<a href={sponsor.link}>
											<Image
												src={src}
												alt={sponsor.title}
												height={70}
												aspectRatio={sponsor.logo.width / sponsor.logo.height}
											/>
										</a>
									);
								})}
							</div>
						</>
					</div>
				) : null
			}

			{
				peopleWithUsername.length > 0 ? (
					<div class="people">
						<h2>People in this episode</h2>

						<div class="people-list">
							{peopleWithUsername.map((person) => {
								if (!person.photo || !person.photo.public_id) {
									return null;
								}

								const imgUrl = createImageUrl(person.photo.public_id, {
									width: 180,
									aspect_ratio: 1,
									crop: 'thumb',
									gravity: 'face',
								});

								return (
									<div class="person">
										<a href={`/profile/${person.username}`}>
											<img src={imgUrl} alt={person.name} />
										</a>
										<h4>{person.name}</h4>
									</div>
								);
							})}
						</div>
					</div>
				) : null
			}
		</section>

		{
			relatedEpisodes.length > 0 ? (
				<section class="related-episodes">
					<h2>
						More episodes from {episode.series?.title}{' '}
						{episode.collection?.title}
					</h2>

					<div class="more-episodes">
						{relatedEpisodes.map((related, index) => {
							const minIndex = Math.max(0, episodeIndex - 3);
							const maxIndex = Math.min(relatedEpisodes.length, minIndex + 6);
							if (
								related.slug === episode.slug ||
								index < minIndex ||
								index > maxIndex
							) {
								return null;
							}

							return (
								<EpisodePreview
									class="compact"
									episode={related}
									episodeNumber={`${episode.collection?.slug}E${index + 1}`.toUpperCase()}
									episodeUrl={`/series/${episode.series?.slug}/${episode.collection?.slug}/${related.slug}`}
								/>
							);
						})}
					</div>
				</section>
			) : null
		}

		{
			supporters.length > 0 ? (
				<section class="supporters">
					<h2>Supporters</h2>
					<p>
						<a href="/dashboard">
							Become a supporter to see yourself here on future episodes!
						</a>
					</p>

					<div class="supporter-list">
						{supporters.map((supporter) => {
							const photo = supporter.photo;

							if (!photo || !photo.public_id) {
								return;
							}

							const src = createImageUrl(photo.public_id, {
								height: 80,
								width: 80,
								crop: 'fill',
							});

							return (
								<a
									href={`/profile/${supporter.username}`}
									title={supporter.name}
								>
									<Image
										src={src}
										alt={supporter.name}
										width={80}
										aspectRatio={1}
									/>
								</a>
							);
						})}
					</div>
				</section>
			) : null
		}
	</div>

	<style>
		.wrapper {
			padding: 1rem 5cqw 4rem;

			@media (min-width: 750px) {
				display: grid;
				gap: 2rem;
				grid-template-columns: repeat(2, calc(50% - 1rem));
			}
		}

		.video-player-placeholder {
			animation: 1s pulse infinite alternate linear;
			aspect-ratio: 16 / 9;
			background: var(--gray-100);
			block-size: auto;
			inline-size: 100dvi;
		}

		.header {
			@media (min-width: 750px) {
				display: flex;
				grid-column: 1 / 3;
				justify-content: space-between;
			}
		}

		.episode-details {
			& h1 {
				font-family: jwf-medium;
				font-size: 1.5rem;
				line-height: 1.1;
				margin-block: 0.25rem 0.5rem;
			}

			& p {
				font-size: 0.75rem;
				line-height: 1.25;
			}
		}

		.episode-links {
			align-items: center;
			display: flex;
			flex-wrap: wrap;
			font-size: 0.75rem;
			gap: 1rem;
			justify-content: center;
			margin-block-start: 1rem;

			@media (min-width: 1000px) {
				margin-block-start: 0;
			}

			label {
				color: var(--text-muted);

				input {
					display: block;
					font-family: jwf-book;
					font-size: 16px;
					inline-size: 300px;
				}
			}

			.button {
				background: var(--yellow-500);
				border: 1px solid var(--gray-300);
				block-size: min-content;
				color: var(--black);
				font-size: 0.875rem;
				margin: 0;
				text-decoration: none;
			}

			.inline-heart {
				margin-inline-end: 0.5rem;
			}
		}

		.episode-meta {
			display: flex;
			font-family: jwf-light;
			font-size: 0.75rem;
			gap: 0.5rem;
			margin-block: 0.25rem;
		}

		.season-link {
			color: var(--text-strong);
			font-family: jwf-medium;
			text-decoration: none;

			&:is(:focus, :hover, :active) {
				text-decoration: underline;
			}
		}

		.episode-number {
			font-family: jwf-medium;
			text-transform: uppercase;
		}

		section,
		.description {
			h2 {
				font-family: jwf-book;
				font-size: 0.875rem;
				line-height: 1.1;
				margin-block: 0.25rem;
			}

			ul {
				margin-block: 0.5rem 0;
				padding-inline-start: 1.25rem;
			}

			li {
				margin-block-start: 0.25rem;
			}

			li,
			p {
				font-size: 0.75rem;
			}

			p {
				&:first-child {
					font-size: 0.875rem;
				}
			}
		}

		.description {
			margin-block: 3rem;
			max-inline-size: 54ch;

			@media (min-width: 1000px) {
				margin-block-start: 0;
			}

			h2 {
				margin-block: 1.5rem 0.5rem;
			}
		}

		.people {
			margin-block-start: 1rem;
		}

		.people-list {
			display: flex;
			flex-wrap: wrap;
			gap: 1rem;
			justify-content: center;
			margin-block-end: 3rem;
			margin-block-start: 1rem;

			@media (min-width: 750px) {
				justify-content: start;
			}
		}

		.person {
			inline-size: 100px;

			& img {
				block-size: auto;
				border-radius: 50%;
				display: block;
				inline-size: 90px;
				margin-inline: auto;
			}

			& h4 {
				color: var(--text-muted);
				font-family: jwf-book;
				font-size: 0.675rem;
				font-weight: normal;
				line-height: 1.1;
				margin-block-start: 0.25rem;
				text-align: center;

				& a {
					color: inherit;
					text-decoration: none;

					&:is(:hover, :focus) {
						text-decoration: underline;
					}
				}
			}
		}

		.sponsors {
			align-items: center;
			display: flex;
			gap: 1.5rem;
			justify-content: start;
			margin: 0;

			h3 {
				color: var(--text-muted);
				font-family: jwf-medium;
				font-size: 0.75rem;
				margin: 0;
				text-transform: uppercase;
			}
		}

		.sponsor-logos {
			align-items: center;
			display: flex;
			gap: 2rem;

			img {
				block-size: 2.5rem;
				inline-size: auto;
			}
		}

		.related-episodes,
		.supporters {
			@media (min-width: 1000px) {
				grid-column: 1 / 3;
				margin-block-end: 3rem;
			}
		}

		.more-episodes {
			display: flex;
			flex-wrap: wrap;
			gap: 2rem;
			justify-content: center;
			margin-block-start: 0.25rem;

			@media (min-width: 1000px) {
				justify-content: start;
			}
		}

		.supporter-list {
			display: flex;
			flex-wrap: wrap;
			gap: 0.25rem;
			justify-content: start;
			margin-block-start: 1rem;

			a {
				display: block;
			}

			img {
				block-size: 40px;
				border-radius: 50%;
			}
		}
	</style>
</Layout>
